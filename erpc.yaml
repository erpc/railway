# Log level helps in debugging or error detection:
# - debug: information down to actual request and responses, and decisions about rate-liming etc.
# - info: usually prints happy paths and might print 1 log per request indicating of success or failure.
# - warn: these problems do not cause end-user problems, but might indicate degredataion or an issue such as cache databse being down.
# - error: these are problems that have end-user impact, such as misconfigurations.
logLevel: debug

# There are various use-cases of database in erpc, such as caching, dynamic configs, rate limit persistence, etc.
database:
  # `evmJsonRpcCache` defines the destination for caching JSON-RPC cals towards any EVM architecture upstream.
  # This database is non-blocking on critical path, and is used as best-effort.
  # Make sure the storage requirements meet your usage, for example caching 70m blocks + 10m txs + 10m traces on Arbitrum needs 200GB of storage.
  evmJsonRpcCache:
    # Refer to "Database" section for more details.
    # Note that table, schema and indexes will be created automatically if they don't exist.
    driver: redis
    redis:
      addr: {{ REDIS_URL }}
      password: {{ REDIS_PASSWORD }}
      db: 0

server:
  httpHostV4: "0.0.0.0"
  listenV6: true
  httpHostV6: "[::]"
  httpPort: 4000

metrics:
  enabled: true
  hostV4: "0.0.0.0"
  hostV6: "[::]"
  port: 4001

projects:
  - id: main
    upstreams:
      - endpoint: alchemy://{{ getenv "ALCHEMY_API_KEY" }}
      - endpoint: envio://rpc.hypersync.xyz
      - endpoint: infura://{{ getenv "INFURA_API_KEY" }}
        id: infura
        type: evm
        evm:
          # (OPTIONAL) chainId is optional and will be detected. DEFAULT: auto-detected.
          chainId: 42161
          # (OPTIONAL) statePollerInterval used to periodically fetch the latest/finalized/sync states. DEFAULT: 30s.
          statePollerInterval: 30s
          # (OPTIONAL) nodeType is optional and you can manually set it to "full" or "archive". DEFAULT: archive
          nodeType: full
          # (OPTIONAL) maxAvailableRecentBlocks limits the number of recent blocks DEFAULT: 128 (for "full" nodes).
          maxAvailableRecentBlocks: 128
        # ...
      - endpoint: https://1rpc.io/{{ getenv "ONERPC_API_KEY" }}/arb
        id: onerpc
        type: evm
        evm:
          # (OPTIONAL) chainId is optional and will be detected. DEFAULT: auto-detected.
          chainId: 42161
          # (OPTIONAL) statePollerInterval used to periodically fetch the latest/finalized/sync states. DEFAULT: 30s.
          statePollerInterval: 30s
          # (OPTIONAL) nodeType is optional and you can manually set it to "full" or "archive". DEFAULT: archive
          nodeType: full
          # (OPTIONAL) maxAvailableRecentBlocks limits the number of recent blocks DEFAULT: 128 (for "full" nodes).
          maxAvailableRecentBlocks: 128
        # ...
      - endpoint: https://arbitrum.llamarpc.com/{{ getenv "LLAMA_API_KEY" }}
        id: llama
        type: evm
        evm:
          # (OPTIONAL) chainId is optional and will be detected. DEFAULT: auto-detected.
          chainId: 42161
          # (OPTIONAL) statePollerInterval used to periodically fetch the latest/finalized/sync states. DEFAULT: 30s.
          statePollerInterval: 30s
          # (OPTIONAL) nodeType is optional and you can manually set it to "full" or "archive". DEFAULT: archive
          nodeType: full
          # (OPTIONAL) maxAvailableRecentBlocks limits the number of recent blocks DEFAULT: 128 (for "full" nodes).
          maxAvailableRecentBlocks: 128
        # ...
      - endpoint: https://arbitrum-mainnet.core.chainstack.com/{{ getenv "CS_ARB_API_KEY" }}
        id: chainstack-arb
        type: evm
        evm:
          # (OPTIONAL) chainId is optional and will be detected. DEFAULT: auto-detected.
          chainId: 42161
          # (OPTIONAL) statePollerInterval used to periodically fetch the latest/finalized/sync states. DEFAULT: 30s.
          statePollerInterval: 30s
          # (OPTIONAL) nodeType is optional and you can manually set it to "full" or "archive". DEFAULT: archive
          nodeType: full
          # (OPTIONAL) maxAvailableRecentBlocks limits the number of recent blocks DEFAULT: 128 (for "full" nodes).
          maxAvailableRecentBlocks: 128
        # ...
      - endpoint: https://ethereum-mainnet.core.chainstack.com/{{ getenv "CS_ETH_API_KEY" }}
        id: chainstack-eth
        type: evm
        evm:
          # (OPTIONAL) chainId is optional and will be detected. DEFAULT: auto-detected.
          chainId: 1
          # (OPTIONAL) statePollerInterval used to periodically fetch the latest/finalized/sync states. DEFAULT: 30s.
          statePollerInterval: 30s
          # (OPTIONAL) nodeType is optional and you can manually set it to "full" or "archive". DEFAULT: archive
          nodeType: full
          # (OPTIONAL) maxAvailableRecentBlocks limits the number of recent blocks DEFAULT: 128 (for "full" nodes).
          maxAvailableRecentBlocks: 128
        # ...
      - endpoint: https://site1.moralis-nodes.com/arbitrum/{{ getenv "MORALIS_API_KEY" }}
        id: moralis-one
        type: evm
        # ...
      - endpoint: https://site2.moralis-nodes.com/arbitrum/{{ getenv "MORALIS_API_KEY" }}
        id: moralis-two
        type: evm
        # ...

# Rate limiter allows you to create "shared" budgets for upstreams.
# For example upstream A and B can use the same budget, which means both of them together must not exceed the defined limits.
rateLimiters:
  budgets:
    - id: default-budget
      rules:
        - method: "*"
          maxCount: 10000
          period: 1s
    - id: global-blast
      rules:
        - method: "*"
          maxCount: 1000
          period: 1s
    - id: global-quicknode
      rules:
        - method: "*"
          maxCount: 300
          period: 1s
    - id: frontend-budget
      rules:
        - method: "*"
          maxCount: 500
          period: 1s
