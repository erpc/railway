logLevel: debug

database:
  evmJsonRpcCache:
    driver: redis
    redis:
      addr: $REDIS_ADDR
      password: $REDIS_PASSWORD
      db: 0

server:
  listenV4: true
  httpHostV4: "0.0.0.0"
  listenV6: true
  httpHostV6: "[::]"
  httpPort: 4000

metrics:
  enabled: true
  hostV4: "0.0.0.0"
  hostV6: "[::]"
  port: 4001

projects:
  - id: main
    upstreams:
      - id: alchemy
        endpoint: alchemy://$ALCHEMY_API_KEY
        failsafe:
          timeout:
            duration: 15s
          retry:
            maxCount: 2
            delay: 1000ms
            backoffMaxDelay: 10s
            backoffFactor: 0.3
            jitter: 500ms
      # - id: envio
      #   endpoint: envio://rpc.hypersync.xyz
      - id: infura
        endpoint: infura://$INFURA_API_KEY
      - id: onerpc
        endpoint: https://1rpc.io/$ONERPC_API_KEY/arb
      - id: llama
        endpoint: https://arbitrum.llamarpc.com/$LLAMA_API_KEY
      - id: chainstack-arb
        endpoint: https://arbitrum-mainnet.core.chainstack.com/$CS_ARB_API_KEY
      - id: chainstack-eth
        endpoint: https://ethereum-mainnet.core.chainstack.com/$CS_ETH_API_KEY
      - id: moralis-one
        endpoint: https://site1.moralis-nodes.com/arbitrum/$MORALIS_API_KEY
      - id: moralis-two
        endpoint: https://site2.moralis-nodes.com/arbitrum/$MORALIS_API_KEY

# Rate limiter allows you to create "shared" budgets for upstreams.
# For example upstream A and B can use the same budget, which means both of them together must not exceed the defined limits.
# rateLimiters:
#   budgets:
#     - id: default-budget
#       rules:
#         - method: "*"
#           maxCount: 10000
#           period: 1s
#     - id: global-blast
#       rules:
#         - method: "*"
#           maxCount: 1000
#           period: 1s
#     - id: global-quicknode
#       rules:
#         - method: "*"
#           maxCount: 300
#           period: 1s
#     - id: frontend-budget
#       rules:
#         - method: "*"
#           maxCount: 500
#           period: 1s
